// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: purchases/purchase_service.proto

package purchases

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PurchaseService_PurchaseCreate_FullMethodName                = "/purchases.PurchaseService/PurchaseCreate"
	PurchaseService_PurchaseUpdate_FullMethodName                = "/purchases.PurchaseService/PurchaseUpdate"
	PurchaseService_PurchaseView_FullMethodName                  = "/purchases.PurchaseService/PurchaseView"
	PurchaseService_PurchaseList_FullMethodName                  = "/purchases.PurchaseService/PurchaseList"
	PurchaseService_GetOutstandingPurchaseDetails_FullMethodName = "/purchases.PurchaseService/GetOutstandingPurchaseDetails"
)

// PurchaseServiceClient is the client API for PurchaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchaseServiceClient interface {
	PurchaseCreate(ctx context.Context, in *Purchase, opts ...grpc.CallOption) (*Purchase, error)
	PurchaseUpdate(ctx context.Context, in *Purchase, opts ...grpc.CallOption) (*Purchase, error)
	PurchaseView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Purchase, error)
	PurchaseList(ctx context.Context, in *ListPurchaseRequest, opts ...grpc.CallOption) (PurchaseService_PurchaseListClient, error)
	GetOutstandingPurchaseDetails(ctx context.Context, in *OutstandingPurchaseRequest, opts ...grpc.CallOption) (*OutstandingPurchaseDetails, error)
}

type purchaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseServiceClient(cc grpc.ClientConnInterface) PurchaseServiceClient {
	return &purchaseServiceClient{cc}
}

func (c *purchaseServiceClient) PurchaseCreate(ctx context.Context, in *Purchase, opts ...grpc.CallOption) (*Purchase, error) {
	out := new(Purchase)
	err := c.cc.Invoke(ctx, PurchaseService_PurchaseCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) PurchaseUpdate(ctx context.Context, in *Purchase, opts ...grpc.CallOption) (*Purchase, error) {
	out := new(Purchase)
	err := c.cc.Invoke(ctx, PurchaseService_PurchaseUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) PurchaseView(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Purchase, error) {
	out := new(Purchase)
	err := c.cc.Invoke(ctx, PurchaseService_PurchaseView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseServiceClient) PurchaseList(ctx context.Context, in *ListPurchaseRequest, opts ...grpc.CallOption) (PurchaseService_PurchaseListClient, error) {
	stream, err := c.cc.NewStream(ctx, &PurchaseService_ServiceDesc.Streams[0], PurchaseService_PurchaseList_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &purchaseServicePurchaseListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PurchaseService_PurchaseListClient interface {
	Recv() (*ListPurchaseResponse, error)
	grpc.ClientStream
}

type purchaseServicePurchaseListClient struct {
	grpc.ClientStream
}

func (x *purchaseServicePurchaseListClient) Recv() (*ListPurchaseResponse, error) {
	m := new(ListPurchaseResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *purchaseServiceClient) GetOutstandingPurchaseDetails(ctx context.Context, in *OutstandingPurchaseRequest, opts ...grpc.CallOption) (*OutstandingPurchaseDetails, error) {
	out := new(OutstandingPurchaseDetails)
	err := c.cc.Invoke(ctx, PurchaseService_GetOutstandingPurchaseDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseServiceServer is the server API for PurchaseService service.
// All implementations must embed UnimplementedPurchaseServiceServer
// for forward compatibility
type PurchaseServiceServer interface {
	PurchaseCreate(context.Context, *Purchase) (*Purchase, error)
	PurchaseUpdate(context.Context, *Purchase) (*Purchase, error)
	PurchaseView(context.Context, *Id) (*Purchase, error)
	PurchaseList(*ListPurchaseRequest, PurchaseService_PurchaseListServer) error
	GetOutstandingPurchaseDetails(context.Context, *OutstandingPurchaseRequest) (*OutstandingPurchaseDetails, error)
	mustEmbedUnimplementedPurchaseServiceServer()
}

// UnimplementedPurchaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPurchaseServiceServer struct {
}

func (UnimplementedPurchaseServiceServer) PurchaseCreate(context.Context, *Purchase) (*Purchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseCreate not implemented")
}
func (UnimplementedPurchaseServiceServer) PurchaseUpdate(context.Context, *Purchase) (*Purchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseUpdate not implemented")
}
func (UnimplementedPurchaseServiceServer) PurchaseView(context.Context, *Id) (*Purchase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseView not implemented")
}
func (UnimplementedPurchaseServiceServer) PurchaseList(*ListPurchaseRequest, PurchaseService_PurchaseListServer) error {
	return status.Errorf(codes.Unimplemented, "method PurchaseList not implemented")
}
func (UnimplementedPurchaseServiceServer) GetOutstandingPurchaseDetails(context.Context, *OutstandingPurchaseRequest) (*OutstandingPurchaseDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutstandingPurchaseDetails not implemented")
}
func (UnimplementedPurchaseServiceServer) mustEmbedUnimplementedPurchaseServiceServer() {}

// UnsafePurchaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseServiceServer will
// result in compilation errors.
type UnsafePurchaseServiceServer interface {
	mustEmbedUnimplementedPurchaseServiceServer()
}

func RegisterPurchaseServiceServer(s grpc.ServiceRegistrar, srv PurchaseServiceServer) {
	s.RegisterService(&PurchaseService_ServiceDesc, srv)
}

func _PurchaseService_PurchaseCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Purchase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).PurchaseCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseService_PurchaseCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).PurchaseCreate(ctx, req.(*Purchase))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_PurchaseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Purchase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).PurchaseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseService_PurchaseUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).PurchaseUpdate(ctx, req.(*Purchase))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_PurchaseView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).PurchaseView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseService_PurchaseView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).PurchaseView(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PurchaseService_PurchaseList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPurchaseRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PurchaseServiceServer).PurchaseList(m, &purchaseServicePurchaseListServer{stream})
}

type PurchaseService_PurchaseListServer interface {
	Send(*ListPurchaseResponse) error
	grpc.ServerStream
}

type purchaseServicePurchaseListServer struct {
	grpc.ServerStream
}

func (x *purchaseServicePurchaseListServer) Send(m *ListPurchaseResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _PurchaseService_GetOutstandingPurchaseDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutstandingPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServiceServer).GetOutstandingPurchaseDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PurchaseService_GetOutstandingPurchaseDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServiceServer).GetOutstandingPurchaseDetails(ctx, req.(*OutstandingPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PurchaseService_ServiceDesc is the grpc.ServiceDesc for PurchaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PurchaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "purchases.PurchaseService",
	HandlerType: (*PurchaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PurchaseCreate",
			Handler:    _PurchaseService_PurchaseCreate_Handler,
		},
		{
			MethodName: "PurchaseUpdate",
			Handler:    _PurchaseService_PurchaseUpdate_Handler,
		},
		{
			MethodName: "PurchaseView",
			Handler:    _PurchaseService_PurchaseView_Handler,
		},
		{
			MethodName: "GetOutstandingPurchaseDetails",
			Handler:    _PurchaseService_GetOutstandingPurchaseDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PurchaseList",
			Handler:       _PurchaseService_PurchaseList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "purchases/purchase_service.proto",
}
